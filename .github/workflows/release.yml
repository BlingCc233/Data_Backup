# .github/workflows/release.yml

name: Release Wails App

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    permissions:
      contents: write

    strategy:
      matrix:
        include:
          # Windows build
          - os: windows-latest
            platform: windows
            arch: amd64
            asset_name_suffix: windows-amd64.exe
          # macOS build for Apple Silicon (arm64) - Changed to DMG
          - os: macos-latest
            platform: darwin
            arch: arm64
            asset_name_suffix: darwin-arm64.dmg # <-- 1. 变更点：后缀从 .zip 改为 .dmg

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        working-directory: ./go-backup-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: go-backup-app/go.sum

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache-dependency-path: go-backup-app/frontend/package-lock.json

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      # <-- 2. 新增步骤：为 macOS 安装 DMG 创建工具
      - name: Install create-dmg (macOS only)
        if: matrix.os == 'macos-latest'
        run: brew install create-dmg

      - name: Set Environment Variables
        shell: bash
        run: |
          PROJECT_NAME=$(jq -r .name wails.json)
          echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_ENV
          
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          
          echo "ASSET_NAME=${PROJECT_NAME}-${VERSION}-${{ matrix.asset_name_suffix }}" >> $GITHUB_ENV
          echo "BINARY_PATH=build/bin/${PROJECT_NAME}" >> $GITHUB_ENV

      - name: Build Wails Application
        run: wails build -platform ${{ matrix.platform }} -ldflags="-s -w"

      # <-- 3. 变更点：修改打包逻辑
      - name: Package Asset
        shell: bash
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            # 使用 create-dmg 创建 DMG 文件
            APP_PATH="build/bin/${PROJECT_NAME}.app"
            create-dmg \
              --volname "${PROJECT_NAME} ${VERSION}" \
              --window-pos 200 120 \
              --window-size 800 400 \
              --icon-size 100 \
              --icon "${PROJECT_NAME}.app" 200 190 \
              --hide-extension "${PROJECT_NAME}.app" \
              --app-drop-link 600 185 \
              "${{ env.ASSET_NAME }}" \
              "${APP_PATH}"
          else
            # Windows 的逻辑保持不变
            mv "${{ env.BINARY_PATH}}$( [ "${{ matrix.os }}" == "windows-latest" ] && echo ".exe" )" "${{ env.ASSET_NAME }}"
          fi

      - name: Create Release and Upload Asset
        uses: ncipollo/release-action@v1
        with:
          artifacts: "go-backup-app/${{ env.ASSET_NAME }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          allowUpdates: true